<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="CacheGitHubCI.Hook">
<Super>%Persistent</Super>
<TimeCreated>63595,74765.029055</TimeCreated>

<Property name="Owner">
<Type>%String</Type>
</Property>

<Property name="Repository">
<Type>%String</Type>
</Property>

<Property name="Namespace">
<Type>%String</Type>
<InitialExpression>$Namespace</InitialExpression>
</Property>

<Index name="Index">
<IdKey>1</IdKey>
<Properties>Owner,Repository,Namespace</Properties>
</Index>

<Property name="Branch">
<Type>%String</Type>
</Property>

<Property name="Username">
<Type>%String</Type>
</Property>

<Property name="Password">
<Type>%String</Type>
</Property>

<Property name="HookId">
<Type>%String</Type>
</Property>

<Property name="TaskId">
<Type>%String</Type>
</Property>

<Property name="Updates">
<Type>CacheGitHubCI.Update</Type>
<Collection>list</Collection>
</Property>

<Property name="PreCompile">
<Type>CacheGitHubCI.Action</Type>
</Property>

<Property name="PostCompile">
<Type>CacheGitHubCI.Action</Type>
</Property>

<Property name="UnitTests">
<Type>CacheGitHubCI.Action</Type>
</Property>

<Method name="%OnNew">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%New</METHOD> method to 
provide notification that a new instance of an object is being created.

<P>If this method returns an error then the object will not be created.
<p>It is passed the arguments provided in the %New call.
When customizing this method, override the arguments with whatever variables and types you expect to receive from %New().
For example, if you're going to call %New, passing 2 arguments, %OnNew's signature could be:
<p>Method %OnNew(dob as %Date = "", name as %Name = "") as %Status
If instead of returning a %Status code this returns an oref and this oref is a subclass of the current
class then this oref will be the one returned to the caller of %New method.]]></Description>
<FormalSpec>Owner:%String,Repository:%String,Branch:%String,Username:%String,Password:%String,Namespace=$Namespace</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set:$d(Owner) ..Owner = Owner
	Set:$d(Repository) ..Repository = Repository
	Set:$d(Namespace) ..Namespace = Namespace
	Set:$d(Branch) ..Branch = Branch
	Set:$d(Username) ..Username = Username
	Set:$d(Password) ..Password = Password

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateHook">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Return:$ISVALIDNUM(..HookId) $$$ERROR($$$GeneralError, "Hook already exists")
	Set HookId = ""
	Set st = ##class(CacheGitHubCI.GitHub).CreateHook(..Owner,..Repository, ..Username, ..Password, ..Namespace, .HookId)
	Return:$$$ISERR(st) st
	Set:$ISVALIDNUM(HookId) ..HookId = HookId
	Return $ISVALIDNUM(HookId)
]]></Implementation>
</Method>

<Method name="DeleteHook">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Return:(..HookId="") $$$ERROR($$$GeneralError, "Hook does not exist")
	Set st = ##class(CacheGitHubCI.GitHub).DeleteHook(..Owner,..Repository, ..Username, ..Password, ..HookId)
	Return:$$$ISERR(st) st
	Set ..HookId = ""
	Return $$$OK
]]></Implementation>
</Method>

<Method name="CreateTask">
<FormalSpec>min:%Integer=60</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set task=##class(%SYS.Task).%New()
	Set task.Name = "Sync " _ ..Repository _ " into " _ ..Namespace
	Set task.NameSpace=$Namespace
	Set task.TimePeriod=0 // Daily
	Set task.TimePeriodEvery=1 // Every 1 day
	Set task.DailyFrequency=1 // Run Several times in a day
	Set task.DailyFrequencyTime=0 // Run every x minutes
	Set task.DailyIncrement=min // # of minutes between runs
	Set task.DailyStartTime = 0 // Start at 00:00:00
	Set task.DailyEndTime = 86399 // End at 23:59:59
	Set task.StartDate = $p($H,",",1) // Start today
	
	Set taskdef = ##class(%SYS.Task.RunLegacyTask).%New()
	Set taskdef.ExecuteCode="Set st=##class(CacheGitHubCI.Hook).Update(""" _ ..Owner _ """,""" _ ..Repository _ """,""" _ ..Namespace_ """) Throw:('st) ##class(%Exception.StatusException).CreateFromStatus(st)"	
	Do task.AssignSettings(taskdef)
	Set task.TaskClass=$classname(taskdef)
	
	Set st = task.%Save()
	Return:$$$ISERR(st) st
	Set ..TaskId = task.%Id()
	Return ##class(%SYS.Task).RunNow(..TaskId)
]]></Implementation>
</Method>

<Method name="DeleteTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set st = ##class(%SYS.Task).%DeleteId(..TaskId)
	Return:$$$ISERR(st) st
	Set ..TaskId = ""
	Return $$$OK
]]></Implementation>
</Method>

<Method name="Update">
<ClassMethod>1</ClassMethod>
<FormalSpec>Owner:%String,Repository:%String,Namespace=$Namespace</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Return:'##class(CacheGitHubCI.Hook).%ExistsId(Owner_"||"_Repository_"||"_Namespace) $$$ERROR($$$GeneralError,"Hook does not exist")
	Set hook = ##class(CacheGitHubCI.Hook).%OpenId(Owner_"||"_Repository_"||"_Namespace)
		
	Set commit = ##class(%ZEN.proxyObject).%New()
	Set st = ##class(CacheGitHubCI.GitHub).GetLastCommit(hook.Owner,hook.Repository,hook.Branch,hook.Username,hook.Password,.commit)
	Return:$$$ISERR(st) st
	
	Set update = ##class(CacheGitHubCI.Update).%New(hook.%Id())
	Set update.Commit = commit.sha
	Set update.Author = commit.author.name
	Set update.URL = commit.url
	
	Set update.PreCompileStatus = hook.PreCompile.Execute()
	Set update.CompileStatus = ##class(CacheGitHubCI.GitHub).Update(hook.Owner,hook.Repository,hook.Branch,hook.Username,hook.Password,hook.Namespace)
	Set update.PostCompileStatus = hook.PostCompile.Execute()
	Set update.UnitTestsStatus = hook.UnitTests.Execute()
	
	Do hook.Updates.Insert(update)
	Do hook.%Save()
	
	Set st = $$$ADDSC($$$ADDSC($$$ADDSC(hook.PreCompileStatus,update.Status),hook.PostCompileStatus),update.UnitTestsStatus)
	Kill (st)
	
	Return st
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
Method UpdateHook() As %Status
{
	#dim %request As %CSP.Request
	#dim obj As %ZEN.proxyObject
	Return:'$isobject(%request) $$$ERROR($$$GeneralError,"Wrong context, must be called from GitHub")
	Set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1)
	
	Set update = ##class(CacheGitHubCI.Update).%New(..%Id())
	Set update.Commit = obj."head_commit".id // identical to obj.after
	Set update.Author = obj."head_commit".author.name
	Set update.URL = obj."head_commit".url
	Set update.Status = ##class(CacheGitHubCI.GitHub).Update(..Owner,..Repository,..Branch,..Username,..Password,..Namespace)
	Do update.%Save()
	Do ..Updates.Insert(update)
	Do ..%Save()
	
	Return update.Status
}*/

]]></Content>
</UDLText>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^CacheGitHubCI.HookD</DataLocation>
<DefaultData>HookDefaultData</DefaultData>
<IdLocation>^CacheGitHubCI.HookD</IdLocation>
<IndexLocation>^CacheGitHubCI.HookI</IndexLocation>
<StreamLocation>^CacheGitHubCI.HookS</StreamLocation>
<Data name="HookDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Branch</Value>
</Value>
<Value name="3">
<Value>Username</Value>
</Value>
<Value name="4">
<Value>Password</Value>
</Value>
<Value name="5">
<Value>HookId</Value>
</Value>
<Value name="6">
<Value>Owner</Value>
</Value>
<Value name="7">
<Value>Repository</Value>
</Value>
<Value name="8">
<Value>Namespace</Value>
</Value>
<Value name="9">
<Value>Updates</Value>
</Value>
<Value name="10">
<Value>TaskId</Value>
</Value>
<Value name="11">
<Value>PreCompile</Value>
</Value>
<Value name="12">
<Value>PostCompile</Value>
</Value>
<Value name="13">
<Value>UnitTests</Value>
</Value>
<Value name="14">
<Value>PreCompileStatus</Value>
</Value>
<Value name="15">
<Value>PostCompileStatus</Value>
</Value>
<Value name="16">
<Value>UnitTestsStatus</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>

<?xml version="1.0" encoding="UTF8"?>
<Export generator="Cache" version="25">
<Class name="CacheGitHubCI.GitHub">
<Super>%RegisteredObject</Super>
<TimeCreated>63595,74968.945813</TimeCreated>

<Method name="GetLocalIP">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Return:($d(^CacheGitHubCI("IP"))) ^CacheGitHubCI("IP")
	Return $SYSTEM.INetInfo.HostNameToAddr($SYSTEM.INetInfo.LocalHostName()) // unreliable
]]></Implementation>
</Method>

<Method name="CreateRequest">
<ClassMethod>1</ClassMethod>
<FormalSpec>Username:%String,Password:%String</FormalSpec>
<ReturnType>%Net.HttpRequest</ReturnType>
<Implementation><![CDATA[
	Set namespace = $Namespace
 	Set SSLConfig = "GitHub"
 	
 	Zn "%SYS"
 	Do:'##class(Security.SSLConfigs).Exists(SSLConfig) ##class(Security.SSLConfigs).Create(SSLConfig)
 	Zn namespace

 	Set req=##class(%Net.HttpRequest).%New()
 	Set req.Https=1
	Set req.SSLConfiguration=SSLConfig
	Set req.Server="api.github.com"							
	Do req.SetHeader("Accept","application/vnd.github.v3+json") 			// we want 3rd version of api	
	
	If ($d(Username) && $d(Password) && (Username'="") && (Password'="")) {	// supply Username and Passwor, if both are provided. GitHub accept Basic Auth
		Set req.Username = Username											// https://developer.github.com/v3/auth/
	 	Set req.Password = Password
	} 	

	Return req
]]></Implementation>
</Method>

<Method name="CreateHook">
<ClassMethod>1</ClassMethod>
<FormalSpec>Owner:%String,Repository:%String,Username:%String="",Password:%String="",Namespace=$Namespace,*HookId</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim req As %Net.HttpRequest
	Set req = ..CreateRequest(Username, Password)
	Set req.Location = "repos/" _ Owner _ "/" _ Repository _ "/hooks" 	
	
	Set hook = ##class(%ZEN.proxyObject).%New()
	Set hook.name = "web"
	//set hook.active = 1 // can't supply js true/false. True by default
	Set hook.events = ##class(%ListOfDataTypes).%New()
	Do hook.events.Insert("push")
	Set hook.config = ##class(%ZEN.proxyObject).%New()
	Set hook.config.url = "http://" _..GetLocalIP() _"/cgci/receive/"_ Owner _ "/" _ Repository _"/" _ Namespace
	Set hook.config."content_type" = "json" 
	Set hook.config."insecure_ssl" = 1
	Set st = ##class(%ZEN.Auxiliary.jsonProvider).%WriteJSONStreamFromObject(req.EntityBody,hook)
	Set st = req.Post()

	Return:$$$ISERR(st) st
	Return:(req.HttpResponse.StatusCode = 404) $$$ERROR($$$GeneralError,"Repository doesn't exist OR you don't have access")
	Return:((req.HttpResponse.StatusCode = 403) && (req.HttpResponse.GetHeader("X-RATELIMIT-REMAINING")=0)) $$$ERROR($$$GeneralError,"API rate limit exceeded. Try logging in.")
 	Return:(req.HttpResponse.StatusCode '= 201) $$$ERROR($$$GeneralError,"Received " _ req.HttpResponse.StatusCode _ " expected 200")
 	
 	Set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(req.HttpResponse.Data,,.obj,1)
 	Set HookId = obj.id
 	
	Return st
]]></Implementation>
</Method>

<Method name="DeleteHook">
<ClassMethod>1</ClassMethod>
<FormalSpec>Owner:%String,Repository:%String,Username:%String="",Password:%String="",HookId:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim req As %Net.HttpRequest
	Set req = ..CreateRequest(Username, Password)
	Set req.Location = "repos/" _ Owner _ "/" _ Repository _ "/hooks/" _ HookId 	

	Set st = req.Send("DELETE","")

	Return:$$$ISERR(st) st
	Return:(req.HttpResponse.StatusCode = 404) $$$ERROR($$$GeneralError,"Repository doesn't exist OR you don't have access")
	Return:((req.HttpResponse.StatusCode = 403) && (req.HttpResponse.GetHeader("X-RATELIMIT-REMAINING")=0)) $$$ERROR($$$GeneralError,"API rate limit exceeded. Try logging in.")
 	Return:(req.HttpResponse.StatusCode '= 204) $$$ERROR($$$GeneralError,"Received " _ req.HttpResponse.StatusCode _ " expected 204")
 	 	
	Return $$$OK
]]></Implementation>
</Method>

<Method name="GetHooks">
<ClassMethod>1</ClassMethod>
<FormalSpec>Owner:%String,Repository:%String,Username:%String="",Password:%String="",Namespace=$Namespace,*Hooks</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set req = ..CreateRequest(Username, Password)
	Set req.Location = "repos/" _ Owner _ "/" _ Repository _ "/hooks" 									
	
	Set st = req.Get()
	Return:$$$ISERR(st) st
	Return:(req.HttpResponse.StatusCode = 404) $$$ERROR($$$GeneralError,"Repository doesn't exist OR you don't have access")
	Return:((req.HttpResponse.StatusCode = 403) && (req.HttpResponse.GetHeader("X-RATELIMIT-REMAINING")=0)) $$$ERROR($$$GeneralError,"API rate limit exceeded. Try logging in.")
 	Return:(req.HttpResponse.StatusCode '= 200) $$$ERROR($$$GeneralError,"Received " _ req.HttpResponse.StatusCode _ " expected 200")

 	#dim objects As List of %ZEN.proxyObject
	Set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(req.HttpResponse.Data,,.Hooks,1)
	Return st
]]></Implementation>
</Method>

<Method name="GetLastCommit">
<ClassMethod>1</ClassMethod>
<FormalSpec>Owner:%String,Repository:%String,Branch:%String="master",Username:%String="",Password:%String="",*Commit:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill Commit
	Set req = ..CreateRequest(Username, Password)
	Set:(Branch="") Branch="HEAD" // Branch does not automatically elevates to master
	Set req.Location = "repos/" _ Owner _ "/" _ Repository _ "/commits/" _ Branch 									
	
	Set st = req.Get()
	Return:$$$ISERR(st) st
	Return:(req.HttpResponse.StatusCode = 404) $$$ERROR($$$GeneralError,"Repository doesn't exist OR you don't have access")
	Return:((req.HttpResponse.StatusCode = 403) && (req.HttpResponse.GetHeader("X-RATELIMIT-REMAINING")=0)) $$$ERROR($$$GeneralError,"API rate limit exceeded. Try logging in.")
 	Return:(req.HttpResponse.StatusCode '= 200) $$$ERROR($$$GeneralError,"Received " _ req.HttpResponse.StatusCode _ " expected 200")

	Set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(req.HttpResponse.Data,,.Commit,1)
	Return st
]]></Implementation>
</Method>

<Method name="Update">
<Description><![CDATA[
Downloads and compiles GitHub repository.<br>
<b>Owner</b> - The name of the repository owner.<br>
<b>Repository</b> - The name of the repository.<br>
<b>Branch</b> - The name of the commit/branch/tag. If skipped the repositoryâ€™s default branch (usually master) would be used.<br>
<b>Username</b> - GitHub user, who has access to repository. Optional for public repositories.<br>
<b>Password</b> - GitHub password, corresponding to Username. Optional for public repositories.<br>
Note, that with Username, you can make up to 5,000 requests per hour. 
For unauthenticated requests, the rate limit allows to make up to 60 requests per hour. 
Unauthenticated requests are associated with an IP address.<br>
<b>Namespace</b> - Namespace, where to download and compile repository.<br>

For example in the repository: https://github.com/intersystems-ru/Cache-MDX2JSON<br>
Owner - intersystems-ru, Repository - Cache-MDX2JSON.<br> ]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Owner:%String,Repository:%String,Branch:%String="",Username:%String="",Password:%String="",Namespace=$Namespace</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim req As %Net.HttpRequest 
	Set req = ..CreateRequest(Username, Password)
	Set req.Location = "repos/" _ Owner _ "/" _ Repository _ "/contents" 	// as described in https://developer.github.com/v3/repos/	
	
 	Set links = ##class(%ListOfDataTypes).%New()
 	Set st = ..ProcessDirectory("",.req,Branch,.links)
 	Return:$$$ISERR(st) st
 	 	
 	Set namespace = $Namespace
 	Zn Namespace
	Set st = ..DownloadFiles(links,req,.list)
	zw list
	Set st2 = $system.OBJ.CompileList(.list,"cuk /checkuptodate=expandedonly")
	Zn namespace
	
 	Return $$$ADDSC(st, st2)
]]></Implementation>
</Method>

<Method name="ProcessDirectory">
<Description><![CDATA[
Process one directory of GitHub repository. Recursive.<br>
<b>Path</b> -Internal repository path. Root is empty string<br>
<b>Request</b> - Authenticated/Set %Net.HttpRequest object.<br>
<b>Links</b> - List of links to raw files (which satisfy <b>IsCacheFile</b> conditions) from repository.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Path:%String="",Request:%Net.HttpRequest,Branch:%String="",&Links:%ListOfDataTypes]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set location = Request.Location
	Set Request.Location = Request.Location _ Path
	Do:(Branch'="") Request.SetParam("ref",Branch) 
	
	Set st = Request.Get()

	Return:$$$ISERR(st) st
	Return:(Request.HttpResponse.StatusCode = 404) $$$ERROR($$$GeneralError,"Repository doesn't exist OR you don't have access")
	Return:((Request.HttpResponse.StatusCode = 403) && (Request.HttpResponse.GetHeader("X-RATELIMIT-REMAINING")=0)) $$$ERROR($$$GeneralError,"API rate limit exceeded. Try logging in.")
 	Return:(Request.HttpResponse.StatusCode '= 200) $$$ERROR($$$GeneralError,"Received " _ Request.HttpResponse.StatusCode _ " expected 200")
 	
 	#dim objects As List of %ZEN.proxyObject
 	#dim obj As %ZEN.proxyObject
	Set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(Request.HttpResponse.Data,,.objects,1)
	Return:$$$ISERR(st) st
	
	For i = 1:1:objects.Count() {		
		Set obj = objects.GetAt(i)
		If (obj.type = "dir") {
			Set st = ..ProcessDirectory("/"_obj.name,Request,Branch,.Links)
			Return:$$$ISERR(st) st		
		} ElseIf (obj.type = "file") {
			//Do:..IsCacheFile(obj) Links.Insert(obj."download_url")
			Do Links.Insert($LB(obj."download_url",..IsCacheFile(obj)))
		} Else {
			// obj.type = "symlink" or obj.type = "submodule"
		} 
	}
	Set Request.Location = location // to keep track of where in the repository tree we are
	Return $$$OK
]]></Implementation>
</Method>

<Method name="IsCacheFile">
<Description>
Check that incoming file is the one you need.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>File:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set extensions = ",xml,cls,csp,csr,mac,int,bas,inc,gbl,prj,obj,pkg,gof,dfi,pivot,dashboard,html,css,js,ts,scss,jpg,png,jpeg,gif,"
	Return:($L(File.name,".")=1) 0 //no extension
	Set File.Extension = $P(File.name,".",$L(File.name,"."))
	Return $F(extensions,","_$ZCVT(File.Extension,"l")_",")
]]></Implementation>
</Method>

<Method name="DownloadFiles">
<Description><![CDATA[
Download list of files on https://raw.githubusercontent.com/ server.<br>
<b>Links</b> - List of links to raw files.<br>
<b>Request</b> - Authenticated/Set %Net.HttpRequest object.<br>
<b>loadedlist</b> - Returns an array of the items loaded. ]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Links:%ListOfDataTypes,Request:%Net.HttpRequest,*Items</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill Items
	Set Request.Server = "raw.githubusercontent.com"
	Set st = $$$OK
	Try
	{
		For i = 1:1:Links.Count() 
		{
			Set link = $ListGet(Links.GetAt(i),1)
			Set bIsCacheFile = $ListGet(Links.GetAt(i),2)
			Set ^gitfiles(i,"link")=link
			Set ^gitfiles(i,"bIsCacheFile")=bIsCacheFile
			
			Set streq = Request.Get($e(link,35,*)) // Remove "https://raw.githubusercontent.com/" from URL.	
			If $$$ISERR(streq)
			{
				Set st=$$$ADDSC(st, streq)
				Set ^gitfiles(i,"streq")=streq
				Continue
			}
			
			Set ^gitfiles(i,"stream")="starting..."
			Set binarystream = Request.HttpResponse.Data
			
			Do binarystream.Rewind() // just in case
			
			Set stream=##class(%GlobalCharacterStream).%New() //translating binary stream into character stream
			While 'binarystream.AtEnd
			{
				//Use eol to prevent breaking lines larger than 32Kb
				Set line=binarystream.ReadLine(, .st, .eol)
				Quit:$System.Status.IsError(st)
							
				If eol
				{
					Set st=stream.WriteLine(line)
				}
				Else
				{
					Set st=stream.Write(line)
				}
				Quit:$System.Status.IsError(st)
			}	
			Quit:$System.Status.IsError(st)
			Set ^gitfiles(i,"stream")="Done"
			
			Do stream.Rewind()
			Do binarystream.Rewind()
			
			Set stload = ""
			
			set items = ""
			If ##class(CacheGitHubCI.UDL).IsUDLFile(stream) 
			{
				Set ^gitfiles(i,"IsUDLFile")="1"
				Do stream.Rewind()
				Set stload = ##class(CacheGitHubCI.UDL).LoadUDLFile(stream, binarystream, link, .items)
			}
			ElseIf bIsCacheFile
			{
				Set ^gitfiles(i,"IsUDLFile")="0"
				Set stload = $system.OBJ.LoadStream(stream,"",.error,.items,,,,"UTF8")
			}
			Set ^gitfiles(i,"stload")=stload
	 		If $$$ISERR(stload)
	 		{
		 		Set st=$$$ADDSC(st, stload)
		 		Continue
	 		}
	 		Merge Items = items  // Does not overwrite existing array keys: Items(itemname)=""
		}
		
		Set Request.Server="api.github.com"
	}
	Catch (oException)
	{
		Set st = oException.AsStatus()
		If $D(i) Set ^gitfiles(i,"st final")=st
	}
	
	Quit st
]]></Implementation>
</Method>
</Class>
</Export>
